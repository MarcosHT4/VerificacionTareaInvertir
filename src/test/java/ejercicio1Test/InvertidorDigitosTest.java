package ejercicio1Test;

import ejercicio1.InvertidorDigitos;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

public class InvertidorDigitosTest {
    private InvertidorDigitos invertidor;

    @BeforeEach
    public void setup() {
        invertidor = new InvertidorDigitos();
    }

    @ParameterizedTest
    @CsvSource({
            "-1,-1",
            "0,0",
            "1,1",
            "30,03",
            "408,804",
            "6500,0056",
            "20800,00802",
            "403002,200304",
            "5432000,0002345",
            "80900400,00400908",
            "900012200,002210009",
            "2147483647, 7463847412",
            "-30,-03",
            "-408,-804",
            "-6500,-0056",
            "-20800,-00802",
            "-403002,-200304",
            "-5432000,-0002345",
            "-80900400,-00400908",
            "-900012200,-002210009",
            "-2147483647,-7463847412",
            "7,7",
            "13,31",
            "107,701",
            "1049,9401",
            "24071,17042",
            "581171,171185",
            "2102831,1382012",
            "47008249,94280074",
            "930005189,981500039",
            "-7,-7",
            "-13,-31",
            "-107,-701",
            "-1049,-9401",
            "-24071,-17042",
            "-581171,-171185",
            "-2102831,-1382012",
            "-47008249,-94280074",
            "-930005189,-981500039",
            "22,22",
            "101,101",
            "2882,2882",
            "14041,14041",
            "350053,350053",
            "1010101,1010101",
            "78000087,78000087",
            "454000454,454000454",
            "-22,-22",
            "-101,-101",
            "-2882,-2882",
            "-14041,-14041",
            "-350053,-350053",
            "-1010101,-1010101",
            "-78000087,-78000087",
            "-454000454,-454000454",
            "24,42",
            "128,821",
            "2482,2842",
            "16740,04761",
            "305812,218503",
            "1672548,8452761",
            "54254642,24645245",
            "784342144,441243487",
            "-24,-42",
            "-128,-821",
            "-2482,-2842",
            "-16740,-04761",
            "-305812,-218503",
            "-1672548,-8452761",
            "-54254642,-24645245",
            "-784342144,-441243487",
            "37,73",
            "153,351",
            "2581,1852",
            "17305,50371",
            "402981,189204",
            "1756543,3456571",
            "43245461,16454234",
            "846545347,743545648",
            "-37,-73",
            "-153,-351",
            "-2581,-1852",
            "-17305,-50371",
            "-402981,-189204",
            "-1756543,-3456571",
            "-43245461,-16454234",
            "-846545347,-743545648",
    })
    public void verifyInvertir(int numeroAInvertir, String expectedResult) {
        String actualResult = invertidor.invertir(numeroAInvertir);
        Assertions.assertEquals(expectedResult, actualResult, "ERROR: La inversi√≥n es incorrecta");
    }
}
